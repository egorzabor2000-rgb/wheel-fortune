class RaiParadiseApp {
    constructor() {
        this.currentTab = 'wheel';
        this.tickets = 3;
        this.coins = 0;
        this.stats = {
            spins: 0,
            coinsWon: 0,
            friends: 0,
            tasks: 0
        };
        this.warmupProgress = 0;
        this.isSpinning = false;
        
        this.init();
    }

    init() {
        this.loadData();
        this.initWheel();
        this.setupEvents();
        this.updateUI();
        this.initTelegram();
    }

    loadData() {
        const saved = localStorage.getItem('raiParadise');
        if (saved) {
            const data = JSON.parse(saved);
            this.tickets = data.tickets || 3;
            this.coins = data.coins || 0;
            this.stats = data.stats || { spins: 0, coinsWon: 0, friends: 0, tasks: 0 };
            this.warmupProgress = data.warmupProgress || 0;
        }
    }

    saveData() {
        const data = {
            tickets: this.tickets,
            coins: this.coins,
            stats: this.stats,
            warmupProgress: this.warmupProgress
        };
        localStorage.setItem('raiParadise', JSON.stringify(data));
    }

    initWheel() {
        this.canvas = document.getElementById('wheelCanvas');
        this.ctx = this.canvas.getContext('2d');
        this.drawWheel();
    }

    drawWheel() {
        const ctx = this.ctx;
        const center = this.canvas.width / 2;
        const radius = center - 10;
        
        ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
        
        const prizes = [
            { name: "–ö–æ–∏–Ω—ã", color: "#FF6B6B", prob: 60 },
            { name: "–ü–æ—Ü–µ–ª—É–π", color: "#4ECDC4", prob: 20 },
            { name: "–ë–∏–ª–µ—Ç", color: "#45B7D1", prob: 10 },
            { name: "–ü–∏–≤–æ", color: "#FFD166", prob: 5 },
            { name: "–ü—Ö—É–∫–µ—Ç", color: "#9B5DE5", prob: 5 }
        ];
        
        let startAngle = 0;
        const total = prizes.reduce((sum, p) => sum + p.prob, 0);
        
        prizes.forEach(prize => {
            const angle = (2 * Math.PI * prize.prob) / total;
            const endAngle = startAngle + angle;
            
            // –†–∏—Å—É–µ–º —Å–µ–≥–º–µ–Ω—Ç
            ctx.beginPath();
            ctx.moveTo(center, center);
            ctx.arc(center, center, radius, startAngle, endAngle);
            ctx.closePath();
            ctx.fillStyle = prize.color;
            ctx.fill();
            
            // –¢–µ–∫—Å—Ç
            ctx.save();
            ctx.translate(center, center);
            ctx.rotate(startAngle + angle / 2);
            ctx.textAlign = 'right';
            ctx.fillStyle = 'white';
            ctx.font = 'bold 12px Arial';
            ctx.fillText(prize.name, radius - 15, 0);
            ctx.restore();
            
            startAngle = endAngle;
        });
        
        // –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –∫—Ä—É–≥
        ctx.beginPath();
        ctx.arc(center, center, 20, 0, 2 * Math.PI);
        ctx.fillStyle = 'white';
        ctx.fill();
    }

    setupEvents() {
        // –ù–∞–≤–∏–≥–∞—Ü–∏—è
        document.querySelectorAll('.nav-btn').forEach(btn => {
            btn.addEventListener('click', (e) => {
                this.switchTab(e.currentTarget.dataset.tab);
            });
        });

        // –ö–æ–ª–µ—Å–æ
        document.getElementById('spinButton').addEventListener('click', () => {
            this.spinWheel();
        });
    }

    switchTab(tab) {
        this.currentTab = tab;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        document.querySelectorAll('.nav-btn').forEach(btn => {
            btn.classList.toggle('active', btn.dataset.tab === tab);
        });
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –≤–∫–ª–∞–¥–∫—É
        document.querySelectorAll('.tab-content').forEach(content => {
            content.classList.toggle('active', content.id === tab + '-tab');
        });
    }

    spinWheel() {
        if (this.isSpinning || this.tickets <= 0) return;
        
        this.isSpinning = true;
        this.tickets--;
        this.stats.spins++;
        
        this.updateUI();
        
        // –í—ã–±–æ—Ä –ø—Ä–∏–∑–∞
        const random = Math.random() * 100;
        const prizes = [
            { type: 'coins', prob: 60 },
            { type: 'kiss', prob: 20 },
            { type: 'ticket', prob: 10 },
            { type: 'beer', prob: 5 },
            { type: 'trip', prob: 5 }
        ];
        
        let sum = 0;
        let prize = null;
        
        for (const p of prizes) {
            sum += p.prob;
            if (random <= sum) {
                prize = p;
                break;
            }
        }
        
        this.animateSpin(prize.type);
    }

    animateSpin(prizeType) {
        const wheel = document.getElementById('wheelCanvas');
        const duration = 3000;
        const startTime = Date.now();
        const startRot = 0;
        const extraRotations = 5;
        const targetRot = extraRotations * 360 + Math.random() * 360;
        
        const animate = () => {
            const now = Date.now();
            const progress = Math.min((now - startTime) / duration, 1);
            
            // –≠—Ñ—Ñ–µ–∫—Ç easeOut
            const ease = 1 - Math.pow(1 - progress, 3);
            const rotation = startRot + (targetRot - startRot) * ease;
            
            wheel.style.transform = `rotate(${rotation}deg)`;
            
            if (progress < 1) {
                requestAnimationFrame(animate);
            } else {
                this.isSpinning = false;
                this.processPrize(prizeType);
                this.updateUI();
            }
        };
        
        animate();
    }

    processPrize(prizeType) {
        let message = '';
        let title = 'üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!';
        
        switch(prizeType) {
            case 'coins':
                const coins = Math.floor(Math.random() * 41) + 10;
                this.coins += coins;
                this.stats.coinsWon += coins;
                message = `–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ ${coins} —Ä–∞–π –∫–æ–∏–Ω–æ–≤!`;
                break;
            case 'ticket':
                this.tickets++;
                message = '–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Å–ø–∏–Ω-–±–∏–ª–µ—Ç!';
                break;
            case 'kiss':
                message = '–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ –ø–æ—Ü–µ–ª—É–π –æ—Ç –†–∞–π —Ä–∞–π—Å–∫–æ–≥–æ!';
                break;
            case 'beer':
                message = '–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ –±—É—Ç—ã–ª—å –ø–∏–≤–∞!';
                break;
            case 'trip':
                message = '–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ –ø–æ–µ–∑–¥–∫—É –Ω–∞ –ü—Ö—É–∫–µ—Ç!';
                break;
        }
        
        this.saveData();
        this.showModal(title, message);
    }

    completeTask(taskType) {
        this.tickets += 3;
        this.coins += 50;
        this.stats.tasks++;
        this.updateUI();
        this.saveData();
        this.showModal('‚úÖ –ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!', '+3 –±–∏–ª–µ—Ç–∞ –∏ +50 —Ä–∞–π –∫–æ–∏–Ω–æ–≤');
    }

    startWarmup() {
        this.warmupProgress = 100;
        this.tickets += 10;
        this.coins += 1000;
        this.stats.tasks++;
        this.updateUI();
        this.saveData();
        this.showModal('üî• –ü—Ä–æ–≥—Ä–µ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω!', '+10 —Å–ø–∏–Ω-–±–∏–ª–µ—Ç–æ–≤ –∏ +1000 —Ä–∞–π –∫–æ–∏–Ω–æ–≤');
    }

    buyTicket(event, cost) {
        if (this.coins >= cost) {
            this.coins -= cost;
            this.updateUI();
            this.saveData();
            this.showModal('üé´ –£—Å–ø–µ—Ö!', '–ë–∏–ª–µ—Ç –∫—É–ø–ª–µ–Ω! –ñ–¥–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ 20 –Ω–æ—è–±—Ä—è');
        } else {
            this.showModal('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ', '–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç —Ä–∞–π –∫–æ–∏–Ω–æ–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –±–∏–ª–µ—Ç–∞');
        }
    }

    shareReferral() {
        this.tickets += 3;
        this.coins += 50;
        this.stats.friends++;
        this.stats.tasks++;
        this.updateUI();
        this.saveData();
        
        const link = 'https://t.me/your_bot';
        const message = `–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –∫ Rai Paradise! üé∞

üé´ –ö—Ä—É—Ç–∏ –∫–æ–ª–µ—Å–æ –∏ –≤—ã–∏–≥—Ä—ã–≤–∞–π –ø—Ä–∏–∑—ã
ü™ô –ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π —Ä–∞–π –∫–æ–∏–Ω—ã
üéÅ –£—á–∞—Å—Ç–≤—É–π –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–∞—Ö
üî• –ó–Ω–∞–∫–æ–º—å—Å—è —Å —É–Ω–∏–∫–∞–ª—å–Ω–æ–π –∞—Ç–º–æ—Å—Ñ–µ—Ä–æ–π

${link}`;

        if (navigator.share) {
            navigator.share({
                title: 'Rai Paradise',
                text: message,
                url: link
            });
        } else {
            navigator.clipboard.writeText(message);
            this.showModal('üìã –°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞', '–ü–æ–¥–µ–ª–∏—Å—å —Å –¥—Ä—É–∑—å—è–º–∏ –∏ –ø–æ–ª—É—á–∞–π –±–æ–Ω—É—Å—ã!');
        }
    }

    showModal(title, text) {
        document.getElementById('modalTitle').textContent = title;
        document.getElementById('modalText').textContent = text;
        document.getElementById('modal').style.display = 'block';
    }

    closeModal() {
        document.getElementById('modal').style.display = 'none';
    }

    updateUI() {
        // –ë–∞–ª–∞–Ω—Å
        document.getElementById('ticketCount').textContent = this.tickets;
        document.getElementById('coinBalance').textContent = this.coins.toLocaleString();
        
        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        document.getElementById('totalSpins').textContent = this.stats.spins;
        document.getElementById('totalCoins').textContent = this.stats.coinsWon.toLocaleString();
        document.getElementById('friendsCount').textContent = this.stats.friends;
        document.getElementById('tasksCount').textContent = this.stats.tasks;
        
        // –ü—Ä–æ–≥—Ä–µ—Å—Å
        document.getElementById('warmupProgress').textContent = this.warmupProgress + '%';
        document.getElementById('progressFill').style.width = this.warmupProgress + '%';
        
        // –ö–Ω–æ–ø–∫–∞ —Å–ø–∏–Ω–∞
        document.getElementById('spinButton').disabled = this.tickets <= 0 || this.isSpinning;
    }

    initTelegram() {
        if (window.Telegram && Telegram.WebApp) {
            Telegram.WebApp.ready();
            Telegram.WebApp.expand();
        }
    }
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
const app = new RaiParadiseApp();

// –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª–∫–∏ –ø–æ –∫–ª–∏–∫—É –Ω–∞ –±—ç–∫–¥—Ä–æ–ø
document.querySelector('.modal-backdrop').addEventListener('click', () => {
    app.closeModal();
});
